//html

<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>sew&so</title>
    <link href="https://fonts.googleapis.com/css?family=Barlow+Condensed:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Montserrat" rel="stylesheet">
    <link rel="stylesheet" href="./css/master.css">
  </head>

  <body class="flexCol" ng-app='app' ng-controller='ctrl' ng-cloak>

    <!--       SIGN IN AND SIGN UP PAGE     -->
    <div class="signUpPage flexRow">
      <div class="signFormPage flexCol">
        <div class="signSelect flexRow">
          <div class="signUpBlock flexRow pointer" ng-class='signUp' ng-click='signUpButton()'>
            <p>SIGN UP</p>
          </div>
          <div class="signInBlock flexRow pointer" ng-class='signIn' ng-click='signInButton()'>
            <p>SIGN IN</p>
          </div>
        </div>
        <div class="signFormMessage">
          <p>Thanks For Registering! Try Signing in</p>
        </div>
        <div class="formLiner flexCol">
          <form class="signUpForm flexCol" action="/register" method="post" ng-if="currentSignPage === 'signup'">
            <input class="signUpFirstname" type="text" name="firstname" value="" placeholder="firstname">
            <input class="signUpLastname" type="text" name="lastname" value="" placeholder="lastname">
            <input class="signUpUsername" type="text" name="username" value="" placeholder="username">
            <input class="signUpPassword" type="password" name="password" value="" placeholder="password">
            <input class="signUpConfirmPassword" type="password" name="confirmpassword" value="" placeholder="confirm password">
            <div data="signUpSubmit" class="submit flexRow pointer" ng-click='signUpSubmit()'>
              <p>{{submitBtnText}}</p>
            </div>
          </form>
          <form class="signInForm flexCol" action="/login" method="post" ng-if="currentSignPage === 'signin'">
            <div class="divLiner"></div>
            <input class="signInUsername" type="text" name="username" value="" placeholder="username">
            <input class="signInPassword" type="password" name="password" value="" placeholder="password">
            <div data="signUpSubmit" class="submit flexRow pointer" ng-click='signInSubmit()'>
              <p>{{submitBtnText}}</p>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!--        LANDING PAGE         -->
    <div class="landingPage flexRow" ng-if="currentPage === 0" ng-click='hideSignInPage()'>
      <div class="homePageContainer flexCol">
        <div class="topHomePage flexRow">
          <div class="movingBox"></div>
          <p class="movingBoxText">Sew & So</p>
          <div class="landingPageButtonSection flexRow">
            <div class="landingPageBtns flexRow">
              <div data="0" class="lpBtn flexRow brittanyPage" ng-click='logIn(1)'><p>SEW & SO</p></div>
              <div data="1" class="lpBtn flexRow brandiPage" ng-click='logIn(2)'><p>BRANDI PAGE</p></div>
              <div class="lpBtn flexRow signUp" ng-click="signUpButton('onLandingPage')"><p>SIGN UP</p></div>
              <div class="lpBtn flexRow loginBtn" ng-click="signInButton('onLandingPage')"><p>SIGN IN</p></div>
            </div>
          </div>
          <div class="landingPageColorOne"></div>
          <div class="landingPageColorTwo"></div>
          <div class="homeImg">
            <!-- <img src="./images/model1.png" alt=""> -->
          </div>
        </div>
        <div class="bottomHomePage">

        </div>
      </div>
    </div>

    <!--      MAIN PAGE       -->
    <div class="container" ng-if="mainPageIndexes.includes(currentPage)">

      <!--        NAVIGATOIN       -->
      <div class="navigationBar flexRow">
        <div class="navHolder flexRow">
          <p data={{$index}} ng-repeat="nav in navOptions track by $index" class="navOptions pointer" ng-click='navigate($event)'>{{nav}}</p>
        </div>
        <div class="imgHolder flexRow">
          <img class="customize customizeDirector pointer" src="{{colors[currentCompany].customIcon}}" alt="" ng-mouseover="customMouseOver()" ng-mouseleave="customMouseLeave()">
          <p  ng-hide="currentPage === 5">click to customize</p>
          <img class="point" src="./images/point.png" alt="" ng-hide="currentPage === 5">
        </div>
      </div>

      <!--        PAGEBODY         -->
      <div class="pageBody hidden flexRow">

        <!--        SIDEBAR         -->
        <div class="sideBar flexRow" ng-hide="currentPage === 5 || currentPage === 'loading'">
          <div class="sideBarLiner">
            <div class="sideBarOption flexCol cart">
              <div class="cartItemHeading flexRow">
                <h1>CART</h1>
                <img src="./images/shoppingBag.png" alt="">
                <div class="itemNumber flexRow"><p>{{cartQuantity}}</p></div>
              </div>

              <!--        CART SECTION         -->
              <div class="cartItemsHolder">
                <div id={{$index}} class="cartItem flexRow" ng-repeat="shoppingCartItem in shoppingCartItems track by $index">
                  <img src={{shoppingCartItem.img}} alt="">
                  <div class="cartItemDescriptionSection">
                    <h2 class="cartItemDescription">{{shoppingCartItem.name}}</h2>
                    <h2 class="cartItemPrice"><span>{{shoppingCartItem.price}}</span><span ng-if="shoppingCartItem.quantity > 1"> x {{shoppingCartItem.quantity}}</span></h2>
                  </div>
                  <div data-cartId={{$index}} class="xBtn pointer" ng-click='removeItemFromShoppingCart(shoppingCartItem)'><p>x</p></div>
                </div>
              </div>

            </div>

            <!--        CATEGORIES         -->
            <!-- <div class="sideBarOption flexCol categories" ng-if="productPageIndexes.includes(currentPage) || currentPage === 'loading'">
              <h1>CATEGORIES</h1>

              <div class="categoriesFilter flexRow" ng-repeat="category in filters.categories track by $index">
                <div data-category={{$index}} class="checkBox pointer" ng-click='checkboxClick($event, $index)'></div>
                <div class="filterText">{{category}}</div>
              </div>

            </div> -->

            <!--        COLORS         -->
            <!-- <div class="sideBarOption flexCol colors" ng-if="currentPage === 'brands' || currentPage === brittanyPageNavOptionName.toLowerCase() || currentPage === brandiPageNavOptionName.toLowerCase() || currentPage === 'loading'">
              <h1>COLORS</h1>
              <div class="colorSection flexRow">

                <div class="colorStrip flexRow" ng-repeat="color in filters.colors track by $index">
                  <div data-color={{$index}} class="colorCircle pointer" style="background-color: {{color.hex}}" ng-click='colorClick($event, $index)'></div>
                  <div data-color={{$index}} class="filterText pointer" ng-click='colorClick($event, $index)'>{{color.name}}</div>
                </div>

              </div>
            </div> -->

            <!--        SIZES         -->
            <!-- <div class="sideBarOption flexCol sizes" ng-if="currentPage === 'brands'">
              <h1>SIZES</h1>
              <div class="sideBarSection flexRow">

                <div class="sideBarStrip flexRow" ng-repeat="size in filters.sizes">
                  <div data-size={{$index}} class="checkBox pointer" ng-click='checkboxClick($event, $index)'></div>
                  <div class="filterText">{{size}}</div>
                </div>

              </div>
            </div> -->

          </div>
        </div>

        <!--        ITEM SECTION         -->
        <div class="itemSection flexRow" ng-if="productPageIndexes.includes(currentPage)">
          <div id={{$index}} class="itemBox flexCol" ng-repeat="product in pageProducts track by $index" ng-mouseover="showOptions($event)" ng-mouseleave="hideOptions($event)">

            <div id={{$index}} class="itemPreview">
              <img data={{$index}} src={{product.img}} class="itemImage itemImg" alt="">
              <div class="itemDesciption flexRow">
                <div class="desciption flexCol">
                  <h2>{{product.name}}</h2>
                  <p>{{product.desciption}}</p>
                </div>
                <div class="itemPriceSection flexRow">
                  <h2>{{product.price}}</h2>
                </div>
              </div>
            </div>

            <div id={{$index}} class="options">
              <img src={{product.img}} class="itemImage" alt="">
              <div class="itemDesciption flexRow">
                <div class="desciption flexCol">
                  <h2>{{product.name}}</h2>
                  <p>{{product.desciption}}</p>
                  <p class="details">{{product.details}}</p>
                </div>
                <div class="itemPriceSection flexRow">
                  <h2>{{product.price}}</h2>
                </div>
              </div>
              <div class="optionsBgColor"></div>
              <div class="optionsScreen flexRow">
                <div ng-if='clickIt'>
                  <img class="customizeItems pointer" src={{colors[currentCompany].customIcon}} alt="">
                  <div data={{$index}} view class="pointer" ng-click="closeView(product, $event, $index)"></div>
                  <div tocart class="pointer"></div>
                </div>
              </div>
            </div>
          </div>

        </div>


        <!--       DESIGNERS         -->
        <div class="itemSection flexRow"  ng-if="currentPage === 3">
          <h1>DESIGNERS</h1>
        </div>

        <!--       CONTACT US        -->
        <div class="itemSection flexRow"  ng-if="currentPage === 4">
          <h1>CONTACT US</h1>
        </div>

        <!--       SHOPPING CART        -->
        <div class="itemSection checkoutSection flexRow"  ng-if="currentPage === 5">
          <div class="cartBagContent">

            <div class="reviewText flexRow">
              <p>REVIEW ITEMS IN CART</p>
              <p id="total">${{checkoutItemsTotal}}</p>
            </div>

            <div class="reviewItems">
              <div class="itemToReview flexRow" ng-repeat='shoppingCartItem in shoppingCartItems'>
                <div class="reviewImg flexRow">
                  <img src={{shoppingCartItem.img}} alt="">
                </div>
                <div class="reviewPrice flexRow">
                  <p>{{shoppingCartItem.price}}</p>
                </div>
                <div class="reviewQuantity flexCol">
                  <div class="quantityNumber flexRow flexRow">
                    <p ng-if="shoppingCartItem.quantity">{{shoppingCartItem.quantity}}</p>
                    <p ng-if="!shoppingCartItem.quantity">1</p>
                  </div>
                  <div class="quantityChange flexRow">
                    <div class="increment flexRow pointer" ng-click="incrementCartItem(shoppingCartItem)">
                      <p>+</p>
                    </div>
                    <div class="decrement flexRow pointer" ng-click="decrementCartItem(shoppingCartItem)">
                      <p>-</p>
                    </div>
                  </div>
                </div>
              </div>

            </div>
          </div>
          <div class="personalInformationForm flexCol">
            <div class="formLiner flexCol">
              <div class="checkoutFormMessage">
                <p>Thanks For Registering! Try Signing in</p>
              </div>
              <form class="signUpForm flexCol" action="/register" method="post">
                <input class="cartForms cartFullname" type="text" name="firstname" value="" placeholder="full name">
                <input class="cartForms cartAddress" type="text" name="username" value="" placeholder="address">
                <input class="cartForms cartCity" type="text" name="password" value="" placeholder="city">
                <input class="cartForms cartState" type="text" name="username" value="" placeholder="state">
                <input class="cartForms cartZipcode" type="text" name="username" value="" placeholder="zipcode">
                <input class="cartForms cartEmailAdress" type="text" name="password" value="" placeholder="email adress">
              </form>
              <div data="signUpSubmit" class="submit flexRow pointer" ng-click='proceedToCheckout()'>
                <p>PROCEED TO CHECKOUT</p>
              </div>
            </div>
          </div>
          <div class="cardCheckOut flexRow">
            <div class="">
              <script src="https://js.stripe.com/v3/"></script>

              <form class="cartForm" action="/charge" method="post" id="payment-form">
                <div class="form-row">
                  <div id="card-element">
                    <!-- a Stripe Element will be inserted here. -->
                  </div>

                  <!-- Used to display form errors -->
                  <div id="card-errors" role="alert"></div>
                </div>

                <button class="shoppingCartBtn flexRow pointer"><p>SUBMIT PAYMENT</p></button>
              </form>
            </div>
          </div>
        </div>

        <!--       LOADING SCREEN     -->
        <div class="itemSection flexRow"  ng-if="currentPage === 'loading'">
          <h1>loading...</h1>
        </div>

      </div>


    </div>

    <!--        GALLERY         -->
    <div class="shoppingCartBigView flexRow">
      <div class="shadedArea" ng-click="hideBigView()"></div>
      <div class="bigView flexRow">
        <div class="galleryImgSection flexCol">
          <div class="itemGallery flexRow">
            <div class="bigViewItemSection">
              <img src={{currentCloseView}} alt="">
            </div>
            <div class="smallViewItemSection flexCol">
              <div class="smallViemItem pointer" ng-click='changeCloseViewItem("smallViewImgOne")'>
                <img src={{smallViewImgOne}} alt="">
              </div>
              <div class="smallViemItem pointer" ng-click='changeCloseViewItem("smallViewImgTwo")'>
                <img src={{smallViewImgTwo}} alt="">
              </div>
              <div class="smallViemItem pointer" ng-click='changeCloseViewItem("smallViewImgThree")'>
                <img src={{smallViewImgThree}} alt="">
              </div>
            </div>
          </div>
        </div>
        <div class="galleryOptions flexCol">
          <div class="xBtnGalleryView flexRow pointer" ng-click="hideBigView()"><p>&#xd7;</p></div>
          <div class="addCartBtnGalleryView flexRow pointer">
            <img src="./images/shoppingBag.png" alt="" ng-click="moveToCart(null, null, eventObj)">
          </div>
        </div>
      </div>
    </div>

    <div class="shoppingCart flexRow" ng-if="currentPage === 'shoppingCart'">

      <div class="shoppingCartContainer flexRow">
        <div class="shoppingCartLeftSide flexRow">
          <div class="">
            <script src="https://js.stripe.com/v3/"></script>

            <form class="cartForm" action="/charge" method="post" id="payment-form">
              <div class="form-row">
                <div id="card-element">
                  <!-- a Stripe Element will be inserted here. -->
                </div>

                <!-- Used to display form errors -->
                <div id="card-errors" role="alert"></div>
              </div>

              <button class="shoppingCartBtn flexRow pointer"><p>Submit Payment</p></button>
            </form>
          </div>
        </div>

        <div class="shoppingCartRightSide flexCol none">
          <div id='creditCard' class='flexRow'>
            <div id='creditCardTop' class='creditCardComponents'>
              <p>Bank</p>
            </div>
            <div id='creditCardBottom' class='creditCardComponents flexRow'>
              <div id='cardNumbers' class='flexRow'>
                <span>4242</span>
                <span>4242</span>
                <span>4242</span>
                <span>4242</span>
              </div>
              <div id='creditCardBottomInfo' class='flexRow'>
                <p class='creditCardName'>my name</p>
                <p>02/22</p>
              </div>
            </div>
          </div>
          <div id='shadow'></div>
        </div>
      </div>

    </div>

    <script type="text/javascript">
      (() => {
          // Create a Stripe client
          var stripe = Stripe('pk_test_fjLtmEb3KeopnnS7MoQ7ERMF');

          // Create an instance of Elements
          var elements = stripe.elements();

          // Custom styling can be passed to options when creating an Element.
          // (Note that this demo uses a wider set of styles than the guide below.)
          var style = {
            base: {
              color: '#32325d',
              lineHeight: '18px',
              fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
              fontSmoothing: 'antialiased',
              fontSize: '16px',
              '::placeholder': {
                color: '#aab7c4'
              }
            },
            invalid: {
              color: '#fa755a',
              iconColor: '#fa755a'
            }
          };

          // Create an instance of the card Element
          var card = elements.create('card', {style: style});

          // Add an instance of the card Element into the `card-element` <div>
          card.mount('#card-element');

          // Handle real-time validation errors from the card Element.
          card.addEventListener('change', function(event) {
            var displayError = document.getElementById('card-errors');
            if (event.error) {
              displayError.textContent = event.error.message;
            } else {
              displayError.textContent = '';
            }
          });

          // Handle form submission
          var form = document.getElementById('payment-form');
          form.addEventListener('submit', function(event) {
            event.preventDefault();

            stripe.createToken(card).then(function(result) {
              if (result.error) {
                // Inform the user if there was an error
                var errorElement = document.getElementById('card-errors');
                errorElement.textContent = result.error.message;
              } else {
                // Send the token to your server
                stripeTokenHandler(result.token);
              }
            });
          });

          function stripeTokenHandler(token) {
            // Insert the token ID into the form so it gets submitted to the server
            var form = document.getElementById('payment-form');
            var hiddenInput = document.createElement('input');
            hiddenInput.setAttribute('type', 'hidden');
            hiddenInput.setAttribute('name', 'stripeToken');
            hiddenInput.setAttribute('value', token.id);
            form.appendChild(hiddenInput);

            // Submit the form
            form.submit();
          }
        })()
    </script>

    <style type="text/css">
      ::-webkit-scrollbar-thumb,
      .itemNumber,
      .optionsBgColor { background-color: {{colors[currentCompany].themeColor}}; }

      .landingPageColorOne { background-color: {{colors.landingPage.themeColorOne}}; }

      .landingPageColorTwo { background-color: {{colors.landingPage.themeColorTwo}};}

      .itemPriceSection,
      .cartItemPrice,
      .addToCartBtn:hover,
      .viewBtn:hover,
      .xBtn p:hover,
      .imgHolder p ,
      .navHighlight { color: {{colors[currentCompany].themeColor}}; }

      .navigationBar { border-bottom: 0.1em solid {{colors[currentCompany].borderThemeColor}}; }

      .sideBar { border-right: 0.1em solid {{colors[currentCompany].borderThemeColor}}; }

      .checkBoxChecked {
        background-color: {{colors[currentCompany].themeColor}};
        border-color: {{colors[currentCompany].themeColor}};
      }

      .colorCircleSelected { border: 4px solid #777; }

      .lpBtn:hover { background-color: {{colors[currentCompany].landingPageBtnHoverColor}}; }
      .lpBtn { background-color: {{colors[currentCompany].landingPageBtnColor}}; }
    </style>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.6.4/angular.min.js"></script>
    <script type="text/javascript" src="./js/databaseBrittany.js"></script>
    <script type="text/javascript" src="./js/databaseBrandi.js"></script>
    <script type="text/javascript" src="./js/main.js"></script>
  </body>
</html>


//css

body,
html {
  font-family: 'Barlow Condensed', sans-serif;
  height: 100vh;
  margin: 0;
  padding: 0;
  width: 100vw;
}

body {
  overflow: hidden;
}

.none {
  display: none !important;
}

/*SCROLLBAR STYLNG*/
::-webkit-scrollbar {
	width: 2px;
}

::-webkit-scrollbar-thumb {
	background-color: #000;
}

/*SCROLLBAR STYLNG END*/

.flexRow {
  align-items: center;
  display: flex;
  justify-content: center;
}

.flexCol {
  align-items: center;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.container {
  height: 85vh;
  width: 91vw;
}

.pointer {
  cursor: pointer;
  user-select: none;
}

.hidden {
  overflow: hidden;
}

.pageBody {
  height: 77vh;
  position: relative;
  width: 100%;
}

.transitionLeft {
  transition: left 0.5s;
}

/*SIGN UP AND SIGN IN PAGE*/

.signUpPage {
  background-color: #fff;
  height: 100vh;
  left: 100%;
  min-width: 30em;
  position: absolute;
  transition: left 0.5s;
  width: 40%;
  z-index: 5;
}

.signFormPage {
  border-radius: 1em;
  height: 50em;
  justify-content: space-between;
  position: relative;
}

.signSelect {
  background-color: transparent;
  color: #000;
  height: 4em;
  margin: 5em 0;
  width: 20em;
}

.formLiner {
  height: 70%;
  justify-content: flex-start;
}

.signUpForm,
.signInForm {
  height: 80%;
  justify-content: space-between;
  margin-bottom: 3em;
}

.divLiner {
  height: 5em;
  width: 3em;
}

.signUpForm input,
.signInForm input {
  border: 0.01em solid #ed7d7d;
  border-radius: 0.2em;
  color: #ed7d7d;
  font-family: 'Barlow Condensed', sans-serif;
  font-size: 1.5em;
  height: 2em;
  letter-spacing: 3px;
  outline: 0;
  outline-color: #ed7d7d;
  padding-left: 0.6em;
  width: 17em;
}

input::placeholder {
  color: #ed7d7d;
  letter-spacing: 3px;
  opacity: 0.4;
}

.submit {
  background-color: #ed7d7d;
  border-radius: 0.2em;
  /*box-shadow: 10px 10px 5px 0px rgba(0,0,0,0.1);*/
  color: #fff;
  height: 3.8em;
  width: 27em;
}

.submit p {
  font-size: 1.8em;
}

.submit:focus {
  background-color: #56d39d;
}

.signUpBlock p,
.signInBlock p {
  font-size: 2em;
  font-weight: 100;
}

.signOption {
  background-color: #ed7d7d;
  border-radius: 0.2em;
  /*box-shadow: 10px 10px 5px 0px rgba(0,0,0,0.1);*/
  color: #fff;
}

.signUpBlock,
.signInBlock {
  height: 100%;
  width: 50%;
}

.signFormMessage,
.checkoutFormMessage {
  display: none;
}

/*LANDING PAGE*/

.landingPage {
  color: #fff;
  height: 100vh;
  position: relative;
  width: 100vw;
}

.homePageContainer {
  height: 80%;
  overflow: hidden;
  width: 69%;
}

.topHomePage {
  align-items: flex-end;
  height: 90%;
  position: relative;
  width: 100%;
}

.landingPageButtonSection {
  height: 5em;
  justify-content: flex-end;
  width: 100%;
}

.lpBtn {
  height: 5em;
  transition: height 0.25s, width 0.25s, background-color 0.5s;
  width: 12em;
  z-index: 2;
}

.lpBtn:hover,
.lpBtnHover {
  border: none;
  height: 8em;
  width: 14em;
}

.landingPageColorOne {

}

.landingPageColorTwo {
  left: 100%;
}

.landingPageColorOne,
.landingPageColorTwo {
  height: 100%;
  position: absolute;
  top: 0;
  width: 100%;
  z-index: -1;
}

.bottomHomePage {
  height: 20%;
  width: 100%;
}

.homePageNav {
  height: 5em;
  justify-content: space-between;
  width: 100%;
}

.hamburgerMenu {
  background-image: url('../images/hamburger.png');
  background-size: 100% 100%;
  height: 2em;
  margin-left: 4em;
  width: 2em;
  z-index: 2;
}

.logInOrSignUp {
  justify-content: space-between;
  margin-right: 4em;
  width: 10em;
  z-index: 2;
}

.logInOrSignUp p {
  font-size: 1.4em;
}

.homeImg {
  left: -2em;
  position: absolute;
  top: -1em;
}

.homeImg img {
  height: 50em;
  opacity: 0.8;
  position: absolute;
  top: -2em;
}

.movingBox {
  background-color: transparent;
  border: 2em solid #444;
  height: 18em;
  left: 16em;
  opacity: 0.4;
  position: absolute;
  top: 10em;
  transform: rotateZ(0deg);
  transform-origin: top;
  transition: transform 0.75s;
  transition: opacity 0.75s;
  width: 14em;
}

.movingBoxStart {
  left: 22em;
  transform: rotateZ(-40deg);
}

.movingBoxIn {
  left: 16em;
  transform: rotateZ(0deg);
  transition: transform 1s, left 1s;
}

.movingBoxOut {
  left: 10em;
  transform: rotateZ(40deg);
  transition: transform 0.5s, left 0.5s;
  transition-timing-function: ease-in;
}

.movingBoxText {
  font-size: 10em;
  font-weight: 100;
  left: 2.6em;
  overflow: hidden;
  position: absolute;
  top: 0.6em;
  transition: height 0.5s;
  width: 10em;
}

/*NAVIGATION BAR*/

.navigationBar {
  align-items: flex-end;
  border-bottom: 0.1em solid #f1f1f1;
  height: 8vh;
  justify-content: space-between;
  width: 100%;
}

.navigationBar p {
  font-size: 1.3em;
  font-weight: 600;
  margin: 0 1em 0 1em;
  margin-bottom: 0.5em;
  transition: margin-bottom 0.5s;
}

.navigationBar p:first-child {
  margin-left: 3em;
}

.navHolder {}

.navOptions {}

.imgHolder {
  height: 2em;
  left: 89%;
  position: absolute;
  top: 10%;
  z-index: 6;
}

.imgHolder p {
  font-size: 0.8em;
  font-weight: 400;
  left: -3em;
  opacity: 0;
  position: relative;
  top: 1em;
  transition: opacity 0.5s;
  width: 10em;
}

.customize {
  height: 100%;
  margin-right: 2em;
}

.customizeDirector {
  background-color: #fff;
  border-radius: 50%;
  padding: 1em;
}

.point {
  height: 100%;
  left: -14.8em;
  position: relative;
  top: -3em;
  transform: rotateZ(180deg);
  transition: top 0.5s;
}

/**********SIDE BAR**********/

.sideBar {
  border-right: 0.1em solid #f1f1f1;
  font-size: 0.8em;
  height: 100%;
  justify-content: flex-end;
  overflow-x: hidden;
  width: 24em;
}

.sideBarLiner {
  height: 88%;
  margin-right: 2em;
  width: 80%;
}

.cart,
.categories,
.colors,
.sizes {
  align-items: flex-start;
}

.sideBarOption {
  margin-bottom: 2em;
}

.sideBarOption h1 {
  font-size: 2em;
}

/*CART*/

.cartItemHeading {
  justify-content: flex-start;
  margin-bottom: 1em;
}

.cartItemHeading img {
  margin: 0 1em;
  width: 2.4em;
}

.itemNumber {
  border-radius: 50%;
  height: 2.6em;
  width: 2.6em;
}

.itemNumber p {
  font-family: 'Montserrat', sans-serif;
  font-size: 2em;
}

.cartItemsHolder {
  max-height: 19em;
  overflow-y: scroll;
  width: 100%;
}

.cartItem {
  align-items: flex-start;
  border-bottom: 1px solid #eee;
  justify-content: space-between;
  margin-bottom: 1em;
  padding-bottom: 1em;
  position: relative;
  width: 100%;
}

.xBtn {
  left: 94%;
  position: absolute;
  top: -6%;
}

.xBtn p {
  font-size: 2em;
  margin: 0;
}

.cartItem img {
  background-color: #eee;
  height: 4em;
  width: 3.2em;
}

.cartItemDescriptionSection {
  width: 75%;
}

.cartItemDescription {
  font-size: 1.4em;
  font-weight: 400;
  margin: 0;
}

.options .itemDesciption {
    align-items: flex-start;
    height: 40%;
    margin: 0;
    padding-top: 1em;
    position: absolute;
    top: 100%;
    width: 100%;
    /*transition: top 0.5s;*/
}

.cartItemPrice {
  margin: 0;
}

/*CATEGORIES*/

.categoriesFilter {
  justify-content: flex-start;
  margin: 0.5em 0;
  width: 100%;
}

.checkBox {
  border: 2px solid #ddd;
  height: 1em;
  margin-right: 1em;
  width: 1em;
}

.filterText {
  color: #777;
  font-size: 1.2em;
}

/*COLORS AND SIDE BAR*/

.colors,
.sizes {
  width: 110%;
}

.colors h1,
.sizes h1 {
  margin-bottom: 1.2em;
}

.colorSection,
.sideBarSection {
  flex-wrap: wrap;
  justify-content: flex-start;
  width: 100%;
}

.sideBarSection {
  align-items: flex-start;
}

.colorStrip,
.sideBarStrip {
  height: 2em;
  justify-content: flex-start;
  margin-bottom: 1.2em;
  width: 50%;
}

.colorCircle {
  border: 4px solid transparent;
  border-radius: 100%;
  height: 1.2em;
  margin-right: 0.5em;
  width: 1.2em;
}

/*ITEM SECTION*/
.cartItemsHolder::-webkit-scrollbar {
	width: 4px;
}

.itemSection::-webkit-scrollbar {
	width: 4px;
}

.sideBar::-webkit-scrollbar {
	width: 0px;
}

/*::-webkit-scrollbar              {background-color: blue;}*/
/*::-webkit-scrollbar-button       {background-color: blue;}*/
/*::-webkit-scrollbar-track        {background-color: blue;}*/
/*::-webkit-scrollbar-track-piece  {background-color: blue;}*/
/*::-webkit-scrollbar-thumb        {background-color: blue;}*/
/*::-webkit-scrollbar-corner       {background-color: blue;}*/
/*::-webkit-resizer                {background-color: blue;}*/

.itemSection {
  flex-wrap: wrap;
  height: 100%;
  justify-content: space-around;
  margin-top: 2em;
  overflow: scroll;
  padding-left: 2em;
  width: 74em;
}

.checkoutSection {
  justify-content: space-around;
  padding: 0;
  width: 100%;
}

.cartBagContent,
.personalInformationForm,
.cardCheckOut {
  height: 45em;
  width: 33%;
}

.personalInformationForm {
  border-left: 0.1em solid #fce9e9;
  border-right: 0.1em solid #fce9e9;
}

.cartForms {
  text-transform: uppercase;
}

.itemBox {
  height: 32em;
  justify-content: flex-start;
  overflow: hidden;
  width: 20em;
}

.options {
  left: 100vw;
  position: relative;
}

.options .details {
  margin-top: 0.5em;
}

.itemImage {
  background-color: #eee;
  height: 26em;
  width: 18em;
}

.itemImg {
  left: -2em;
  opacity: 0;
  position: relative;
  transition: left 0.5s;
}

.fullBackground {
  background-size: 100% 100%;
}

.itemDesciption {
  align-items: flex-start;
  height: 20%;
  padding-top: 1em;
  width: 100%;
}

.itemDesciption h2,
.itemDesciption p {
  margin: 0;
}

.desciption {
  align-items: flex-start;
  width: 74%;
}

.desciption h2 {
  font-size: 1.2em;
}

.desciption p {
  color: #aaa;
}

.itemPriceSection {
  align-items: flex-start;
  height: 3em;
  justify-content: flex-end;
  width: 12%;
}

.optionsBgColor {
  height: 26em;
  left: 0;
  opacity: 0.8;
  position: absolute;
  top: 0;
  width: 18em;
}

.optionsScreen {
  align-items: flex-start;
  height: 26em;
  left: 0;
  padding-top: 7.6em;
  position: absolute;
  top: 0;
  width: 18em;
}

.clickIt {
  position: relative;
}

.customizeItems {
  height: 2em;
  left: 80%;
  opacity: 1;
  position: absolute;
  top: 5%;
  transition: opacity 0.8s;
}

.customizeItems:hover {
  opacity: 1 !important;
}

.addToCartBtn,
.viewBtn {
  border: 0.2em solid #fff;
  color: #fff;
  height: 3em;
  width: 8em;
}

.viewBtn {
  margin-bottom: 0.4em;
}

.addToCartBtn:hover,
.viewBtn:hover {
  background-color: #fff;
  font-weight: bold;
}

.details {
  height: 7em;
}

.itemDesciption {
    background-color: #fff;
  top: 28em;
    z-index: 2;
}

.shoppingCartBigView {
  height: 100vh;
  left: 0;
  position: absolute;
  top: 0;
  width: 100vw;
  z-index: 2;
}

.shadedArea {
  background-color: #444;
  height: 100%;
  opacity: 0.4;
  position: absolute;
  width: 100%;
  z-index: 1;
}

.bigView {
  z-index: 2;
}

.galleryImgSection {
  background-color: #fff;
  height: 90%;
  width: 48em;
}

.galleryImgSection img {
  height: 98%;
  max-width: 90%;
}

.galleryOptions {
  height: 10em;
  left: 86.6%;
  position: absolute;
  top: 16%;
  width: 9em;
}

.itemGallery {
  height: 90%;
  justify-content: space-around;
  width: 100%;
}

.bigViewItemSection {
  height: 52em;
  width: 36em;
}

.bigViewItemSection img {
  height: 100%;
}

.smallViewItemSection {
  height: 100%;
  justify-content: space-around;
  width: 14em;
}

.smallViemItem {
  height: 16em;
  width: 14em;
}

.smallViemItem img {
  height: 99%;
  width: 10em;
}

.xBtnGalleryView,
.addCartBtnGalleryView {
  background-color: #fff;
  border-radius: 50%;
  color: #000;
  height: 4em;
  margin-bottom: 0.6em;
  width: 4em;
}

.xBtnGalleryView:hover,
.addCartBtnGalleryView:hover {
  opacity: 1;
}

.xBtnGalleryView p {
  font-size: 4em;
  line-height: 0;
  margin: 0;
  position: relative;
  top: -4px;
}

.addCartBtnGalleryView img {
  width: 2.4em;
}

/**
 * The CSS shown here will not be introduced in the Quickstart guide, but shows
 * how you can use CSS to style your Element's container.
 */

.shoppingCart {
  z-index: 2;
}

.creditCard {
  border-radius: 2em;
  /*box-shadow: 10px 10px 5px 0px rgba(0,0,0,0.1);
  box-shadow: 10px 10px 40px 9px rgba(0,0,0,0.1);
  box-shadow: 0px 70px 68px 0px rgba(0,0,0,0.1);*/
  height: 20em;
  width: 40em;
}

 .cartForm {
   width: 30em;
 }

.StripeElement {
  background-color: white;
  background-color: transparent;
  border: 0.01em solid #ed7d7d;
  border-bottom: none;
  border-radius: 4px;
  box-shadow: 0 1px 3px 0 #e6ebf1;
  box-shadow: none;
  height: 40px;
  padding: 10px 12px;
}

.StripeElement--focus {
  box-shadow: 0 1px 3px 0 #cfd7df;
}

.StripeElement--invalid {
  border-color: #fa755a;
}

.StripeElement--webkit-autofill {
  background-color: #fefde5 !important;
}

.shoppingCartConatiner {
  height: 100vh;
  width: 100vw;
}

.shoppingCartForm {
  color: #ec7979;
  width: 36em;
}

.shoppingCartBtn {
  background-color: #ed7d7d;
  border: none;
  border-radius: 0.2em;
  color: #fff;
  font-family: 'Barlow Condensed', sans-serif;
  font-size: 1em;
  height: 3.8em;
  outline: 0;
  width: 27em
}

.shoppingCartBtn p {
  font-size: 1.8em;
  margin: 0;
}


label {
  left: 1em;
  position: relative;
  top: -1em;
}

.creditCard {
  align-items: flex-end;
}

.cardInfo {
  width: 100%;
}

.cartForm {
  height: 10em;
  width: 100%;
}


/*SHOPPING CART*/

.reviewText {
  justify-content: space-around;
  width: 100%;
}

.reviewText p {
  font-size: 2em;
}

#total {
  font-size: 2em;
  letter-spacing: 3px;
}

.reviewItems {
  height: 36em;
  justify-content: flex-end;
  overflow: scroll;
}

.itemToReview {
  height: 12em;
  margin-bottom: 1em;
  width: 100%;
}

.reviewImg {
  height: 12em;
  width: 12em;
}

.reviewImg img {
  height: 96%;
}

.reviewPrice {
  height: 10em;
  width: 10em;
}

.reviewPrice p {
  font-size: 3em;
}

.reviewQuantity {
  height: 10em;
  width: 10em;
}

.quantityChange {
  justify-content: space-between;
  width: 7em;
}

.increment,
.decrement {
  border: 0.01em solid #ed7d7d;
  border-radius: 50%;
  height: 3em;
  width: 3em;
}

.quantityNumber p,
.increment p,
.decrement p {
  font-size: 2em;
}


/*CHECKOUT PAGE*/

.shoppingCartContainer {
  height: 100vh;
  width: 68em;
}

.shoppingCartLeftSide,
.shoppingCartRightSide {
  height: 100vh;
  width: 50%;
}

.creditCardComponents {
  height: 50%;
  width: 100%;
}

#creditCard {
  background-color: #222;
  border-radius: 1em;
  color: #fff;
  flex-direction: column;
  font-family: sans-serif;
  height: 17.2em;
  position: relative;
  width: 27.4em;
}

#creditCardTop,
#creditCardBottom {
  position: absolute;
}

#creditCardTop {
  top: 0;
}

#creditCardBottom {
  top: 50%;
}

#creditCardTop p {
  font-size: 2.6em;
  margin: 1em;
}

#creditCardBottom {
  align-items: space-between;
  flex-direction: column;
  justify-content: flex-start;
}

#cardNumbers {
  align-items: flex-start;
  justify-content: space-around;
  width: 80%;
}

#creditCardBottom span {
  font-size: 2em;
}

#creditCardBottomInfo {
  align-items: flex-end;
  height: 80%;
  justify-content: space-between;
  width: 60%;
}

#creditCardBottomInfo .creditCardName {
  font-size: 1.2em;
}

#shadow {
  background-color: #222;
  border-radius: 1em;
  filter: blur(8px);
  flex-direction: column;
  height: 1em;
  margin-top: 8em;
  width: 20em;
}


//js

'use strict';

var app = angular.module('app', []);

app.controller('ctrl', ['$scope', '$rootScope', '$interval', '$timeout', 'backend', 'animate', 'data', 'task', function($scope, $rootScope, $interval, $timeout, backend, animate, data, task){

  const hiddenNavigationOptions = () => {
    $(".navOptions[data=3]").hide();
    $(".navOptions[data=4]").hide();
  }
  $interval(() => { hiddenNavigationOptions() })

  //sign up page
  $scope.submitBtnText = '';
  $scope.hideSignInPage = () => {
    const onSignInPage = ($rootScope.currentSignPage === 'signin') || ($rootScope.currentSignPage === 'signup');
    if(onSignInPage && $rootScope.for1sec){
      animate.hideSignIngPage();
    }
  }
  $scope.signUpButton = (page) => {
    if(page === 'onLandingPage'){
      animate.toSignFormPage('signup');
      $scope.submitBtnText = 'sign up';
    } else {
      $('.signFormMessage').fadeOut();
      $scope.submitBtnText = 'sign up';
      $rootScope.currentSignPage = 'signup';
      $rootScope.signUp = "signOption";
      $rootScope.signIn = "";
    }
  }
  $scope.signInButton = (page) => {
    if(page === 'onLandingPage'){
      animate.toSignFormPage('signin');
      $scope.submitBtnText = 'sign in';
    } else {
      $('.signFormMessage').fadeOut();
      $scope.submitBtnText = 'sign in';
      $rootScope.currentSignPage = "signin";
      $rootScope.signUp = "";
      $rootScope.signIn = "signOption";
    }
  }
  $scope.signUpSubmit = () => {
    const firstname = $('.signUpFirstname').val();
    const lastname = $('.signUpLastname').val();
    const username = $('.signUpUsername').val();
    const password = $('.signUpPassword').val();
    const confirmPassword = $('.signUpConfirmPassword').val();
    const url = "/register";
    const signUpObj = { firstname: firstname, lastname: lastname, username: username, password: password }

    const hasEmptyField = task.hasEmptyFieldCheck(signUpObj);
    const passwordDontMatch = (password != confirmPassword);

    if(passwordDontMatch){
      $(".signFormMessage p").text("Please confirm your passwords match. Thanks!");
      $('.signFormMessage').fadeIn();
    } else if(hasEmptyField){
      $(".signFormMessage p").text("Please fill in all fields. Thanks!");
      $('.signFormMessage').fadeIn();
    } else {
      backend.register(signUpObj, url);
    }
  }
  $scope.signInSubmit = () => {
    const username = $('.signInUsername').val();
    const password = $('.signInPassword').val();
    const url = "/login";
    const signInObj = { username: username, password: password }

    const hasEmptyField = task.hasEmptyFieldCheck(signInObj);

    if(hasEmptyField){
      $(".signFormMessage p").text("Please fill in all fields. Thanks!");
      $('.signFormMessage').fadeIn();
      return null;
    }

    backend.loginRequest(signInObj, url);

    const checkForLogIn = $interval(function () {
      if($rootScope.successfullyLoggedIn != true){ return null }
      $interval.cancel(checkForLogIn);
      $rootScope.successfullyLoggedIn = false;
      $rootScope.pageProducts = data.setPageProducts(1);
      animate.homeNav(1);
      $timeout(() => {
        //navigation highlight
        $(".navOptions").removeClass("navHighlight");
        $(".navOptions[data=" + 1 + "]").addClass("navHighlight");
      }, 1000);
    }, 10);
  }

  $scope.mainPageIndexes = [1, 2, 3, 4, 5, "loading"];
  $scope.productPageIndexes = [1, 2];
  $scope.navOptions = ['HOME', 'SEW & SO', 'BRANDI', 'DESIGNERS', 'CONTACT', 'CHECKOUT'];
  $scope.filters = data.filters;

  $scope.logIn = (pageIndex) => {
    $rootScope.currentCompany = (pageIndex === 1) ? $rootScope.firstCompany : $rootScope.secondCompany;
    $rootScope.pageProducts = data.setPageProducts(pageIndex);
    animate.homeNav(pageIndex);
    $timeout(() => {
      //navigation highlight
      $(".navOptions").removeClass("navHighlight");
      $(".navOptions[data=" + pageIndex + "]").addClass("navHighlight");
    }, 1000);
  }
  $scope.navigate = (e) => {
    const pageIndex = parseInt(e.currentTarget.attributes.data.nodeValue);
    const isOnClickedPage = pageIndex == $rootScope.currentPage;
    if(!isOnClickedPage){
      if($rootScope.loadingPage === true){ return null }
      $rootScope.loadingPage = true;
      $timeout(() => { $rootScope.loadingPage = false; }, 1600)

      if(pageIndex === 0){
        animate.homeNav(pageIndex);
        $('.movingBoxText').text($scope.navOptions[1]);
        $rootScope.isIntervalInProgress = false;
        $rootScope.onHomePage = true;
        $timeout(() => { animate.landingPage(); }, 2000)
      } else if (pageIndex === 1) {
        animate.slider(pageIndex);
        $rootScope.currentCompany = $rootScope.firstCompany;
        $timeout(() => {
          $rootScope.pageProducts = data.setPageProducts(pageIndex);
        })
      } else if (pageIndex === 2) {
        animate.slider(pageIndex);
        $rootScope.currentCompany = $rootScope.secondCompany;
        $timeout(() => {
          $rootScope.pageProducts = data.setPageProducts(pageIndex);
        })
      } else if (pageIndex === 5) {
        $rootScope.currentCompany = 'sewAndSewColors';
        animate.slider(pageIndex);
        $('.cartItemsHolder').css('maxHeight', '45em');
      } else {
        animate.slider(pageIndex);
        $('.cartItemsHolder').css('maxHeight', '45em');
      }
    }
  }

  //cart moving
  $scope.moveToCart = (e, index, eventObj) => {
    $rootScope.loadingPage = true;
    let switchImg = false;
    $timeout(() => { $rootScope.loadingPage = false; }, 1800)

    $('.customizeDirector').css('opacity', 1);
    $rootScope.trackItems++;
    $rootScope.clickIt = false;
    let nodeValue;
    let indexValue;
    if(eventObj){
      nodeValue = eventObj.nodeValue;
      indexValue = eventObj.indexValue;
      switchImg = eventObj.currentlySelectedImg;
    } else {
      nodeValue = e.currentTarget.attributes[0].nodeValue;
      indexValue = index;
    }
    const selector = '.itemImage[data=' + nodeValue + ']';
    animate.itemToShoppingCart(selector, nodeValue, indexValue, switchImg);
  }

  //close view options
  $scope.eventObj = {};
  $scope.currentCloseView = '';
  $scope.smallViewImgOne = '';
  $scope.smallViewImgTwo = '';
  $scope.smallViewImgThree = '';
  $scope.changeCloseViewItem = (item) => {
    $scope.currentCloseView = $scope[item];
    $scope.eventObj["currentlySelectedImg"] = $scope[item];
  }

  $scope.closeView = (product, e, index) => {
    $scope.currentCloseView = product.img;
    $scope.smallViewImgOne = product.imgSlideShow[0];
    $scope.smallViewImgTwo = product.imgSlideShow[1];
    $scope.smallViewImgThree = product.imgSlideShow[2];
    const nodeValue = e.currentTarget.attributes[0].nodeValue;
    $scope.eventObj["nodeValue"] = nodeValue;
    $scope.eventObj["indexValue"] = index;
    $scope.eventObj["currentlySelectedImg"] = product.imgSlideShow[0];
    $(".shoppingCartBigView").fadeIn();
  }

  //cutsome button
  $scope.customMouseOver = () => {
    $('.imgHolder p').css('opacity', 1);
    $('.customizeDirector').css('opacity', 1);
  }
  $scope.customMouseLeave = () => {
    $('.imgHolder p').css('opacity', 0);
  }



  //check out
  $scope.proceedToCheckout = () => {
    const cartFullname = $(".cartFullname").val();
    const cartAddress = $(".cartAddress").val();
    const cartCity = $(".cartCity").val();
    const cartState = $(".cartState").val();
    const cartZipcode = $(".cartZipcode").val();
    const cartEmailAdress = $(".cartEmailAdress").val();

    const checkoutObj = {
      cartFullname: cartFullname,
      cartAddress: cartAddress,
      cartCity: cartCity,
      cartState: cartState,
      cartZipcode: cartZipcode,
      cartEmailAdress: cartEmailAdress,
    }

    const hasEmptyFields = task.hasEmptyFieldCheck(checkoutObj);

    if (data.cartItems.length === 0) {
      $(".checkoutFormMessage p").text("There are no items in your cart");
      $('.checkoutFormMessage').fadeIn();
      $timeout(() => { $('.checkoutFormMessage').fadeOut(); }, 5000);
    } else if(hasEmptyFields){
      $(".checkoutFormMessage p").text("Please fill in all fields. Thanks!");
      $('.checkoutFormMessage').fadeIn();
      $timeout(() => { $('.checkoutFormMessage').fadeOut(); }, 5000);
    } else {
      animate.creditCardSlider("shoppingCart");
    }
  }
  $scope.backFromShoppingCart = () => {
    animate.creditCardSlider(5);
  }

  $rootScope.signUp = "";
  $rootScope.signIn = "";
  $rootScope.loadingPage = false;
  $rootScope.onHomePage = true;

  $rootScope.currentCompany = 'sewAndSewColors';
  $rootScope.colors = {
    sewAndSewColors: {
      themeColor: '#ed7d7d',
      borderThemeColor: '#fce9e9',
      landingPageBtnColor: '#ea6262',
      landingPageBtnHoverColor: '#430909',
      customIcon: './images/sewing.png'
    },
    brandiCompanyColors: {
      themeColor: '#5b94ef',
      borderThemeColor: '#e8f0fd',
      landingPageBtnColor: '#4585ed',
      landingPageBtnHoverColor: '#0b3474',
      customIcon: './images/crochet.png'
    },
    otherPage: {
      themeColor: '#999',
      landingPageBtnColor: '#777',
      landingPageBtnHoverColor: '#444'
    },
    landingPage: {
      themeColorOne: '#ed7d7d',
      themeColorTwo: '#5b94ef'
    }
  }
  $rootScope.firstCompany = Object.keys($rootScope.colors)[0];
  $rootScope.secondCompany = Object.keys($rootScope.colors)[1];
  $rootScope.thirdCompany = Object.keys($rootScope.colors)[2];

  $rootScope.sew_products;
  $rootScope.crochet_products;
  $rootScope.pageProducts;
  $rootScope.currentPage = 0;
  $rootScope.currentSignPage = '';
  $rootScope.for1sec = false;
  $rootScope.navOptions = data.navOptions;
  $rootScope.successfullyLoggedIn = false;
  $rootScope.pauseChartAddition = false;
  $rootScope.sew_products;
  $rootScope.crochet_products;

  //shopping cart items
  $rootScope.individualItemsInShoppingCart = [];
  $rootScope.shoppingCartItems = [];
  $rootScope.cartIndex = 0;
  $scope.incrementCartItem = (item) => {
    task.increment(item);
  }
  $scope.decrementCartItem = (item) => {
    task.decrement(item);
  }
  $scope.removeItemFromShoppingCart = (item) => {
    task.removeItemFromShoppingCart(item);
  }
  $rootScope.checkoutItemsTotal;

  //need to be reviewed

  $scope.showOptions = (e) => {
    const id = parseInt(e.currentTarget.id);
    $rootScope.currentItem = id;
    $('.itemPreview[id='+ id + ']').hide();
    $('.options[id='+ id + ']').css('left', 0);
    $('.options .itemDesciption').animate({ top: '60%' }, 100);
  }
  $scope.checkboxClick = (e, index) => {
    const attributes = e.currentTarget.attributes;
    const values = [];
    for(let i = 0; i < attributes.length; i++){ values.push(attributes[i].nodeName) }
    const isSizeCheckbox = values.includes('data-size');
    const isCategoryCheckbox = values.includes('data-category');
    const isChecked = attributes[1].nodeValue.includes('checkBoxChecked');
    if(isSizeCheckbox){
      if(isChecked){ $('.checkBox[data-size = ' + index + ']').removeClass('checkBoxChecked') }
      else{ $('.checkBox[data-size = ' + index + ']').addClass('checkBoxChecked') }
    }
    else if (isCategoryCheckbox) {
      if(isChecked){ $('.checkBox[data-category = ' + index + ']').removeClass('checkBoxChecked') }
      else{ $('.checkBox[data-category = ' + index + ']').addClass('checkBoxChecked') }
    }
  }
  $scope.colorClick = (e, index) => {
    const attributes = e.currentTarget.attributes;
    const $target = $('.colorCircle[data-color = ' + index + ']');
    const isChecked = $target.hasClass('colorCircleSelected');
    if(isChecked){ $target.removeClass('colorCircleSelected') }
    else{ $target.addClass('colorCircleSelected') }
  }
  $scope.hideOptions = (e) => {
    const id = parseInt(e.currentTarget.id);
    const complete = () => {
      $('.options[id='+ id + ']').css('left', '100vw');
      $('.itemPreview[id='+ id + ']').show();
    }
    const animation = { top: '100%' };
    const options = { duration: 0, complete };
    $('.options .itemDesciption').animate(animation, options);
  }
  $scope.hideBigView = () => {
    $('.shoppingCartBigView').hide();
    $('.customizeDirector').css('opacity', 1);
  }

  $rootScope.isIntervalInProgress = false;

  $rootScope.viewSlideShow = [];
  $rootScope.currentSlideImg;
  $rootScope.currentSlideImgNumber = 0;
  $rootScope.cartQuantity = data.getCartLength();
  $rootScope.clickIt = true;
  $rootScope.trackItems = 0;
  $rootScope.currentItem;
  $rootScope.landingPageAnimationInterval;

  //add ids to the cart items => brittanys id start with 1000, brandis 2000, so on
  $rootScope.sew_products = task.assignIDs(sew_products);
  $rootScope.crochet_products = task.assignIDs(crochet_products);

  task.init();
  $timeout(() => { animate.landingPage(); })
  animate.customButton();
  task.checkoutItemsTotal();
}]);

app.service("backend", function($http, $rootScope, $interval, $timeout, task, data, animate){
  this.loginRequest = (signInObj, url) => {
    $http({
      method: 'POST',
      url: url,
      data: JSON.stringify(signInObj),
      headers: { 'Content-Type': 'application/json' }
    }).then(
        (success) => { successCallback(success) },
        (error) => { errorCallback(error.data) }
      );

    const successCallback = (success) => {
      console.log("successfully logged in");
      animate.hideSignIngPage();
      //set profile information
      this.setUserInfo(success)
      $rootScope.successfullyLoggedIn = true;
    }

    const errorCallback = () => {
      console.log("error logging in");
      $(".signFormMessage p").text("Username or Password incorrect");
      $('.signFormMessage').fadeIn();
    }
  };
  this.register = (signUpObj, url) => {
    $http({
      method: 'POST',
      url: url,
      data: JSON.stringify(signUpObj),
      headers: { 'Content-Type': 'application/json' }
    }).then(
        (success) => { successCallback(success) },
        (error) => { errorCallback(error.data) }
      );

    const successCallback = (success) => {
      console.log("successfully registered");

      $(".signFormMessage p").text("Thanks For Registering! Try Signing in");
      $('.signFormMessage').fadeIn();

      $rootScope.currentSignPage = "signin";
      $rootScope.signUp = "";
      $rootScope.signIn = "signOption";
    }

    const errorCallback = () => {
      console.log("error registering");
      $(".signFormMessage p").text("Username taken. sorry...");
      $('.signFormMessage').fadeIn();
    }
  }
  this.deleteacc = (id, url) => {

    const data = {
      id: id
    }

    $http({
      method: 'DELETE',
      url: url,
      data: JSON.stringify(data),
      headers: { 'Content-Type': 'application/json' }
    }).then(
        (success) => { successCallback(success) },
        (error) => { errorCallback(error.data) }
      );

    const successCallback = (success) => {
      console.log('account deleted');
    }

    const errorCallback = () => {
      console.log('error deleting account');
    }
  }
  this.email = (name, email, subject, message, url) => {
    let sendMessage = "";
    sendMessage += '<style> div { color: #eee;background-color: #333;font-family: "Barlow Semi Condensed", sans-serif;padding: 1em;margin: 0 auto;width: 20em; } p { font-size: 1.2em; } </style>';
    sendMessage += "<div>";
    sendMessage += "<p>name: <span>" + name + "</span></p>";
    sendMessage += "<p>contact: <span>" + email + "</span></p>";
    sendMessage += "<p>subject: <span>" + subject + "</span></p>";
    sendMessage += "<p>message: </p>";
    sendMessage += "<p>" + message + " </p>";
    sendMessage += "</div>";

    const data = {
      name: name,
      email: 'letsbuildyourwebsite@outlook.com',
      subject: subject,
      message: sendMessage
    }

    $http({
      method: 'POST',
      url: url,
      data: JSON.stringify(data),
      headers: { 'Content-Type': 'application/json' }
    }).then(
        (success) => { successCallback(success) },
        (error) => { errorCallback(error.data) }
      );

    const successCallback = () => {
      console.log('email sent');
    }

    const errorCallback = (err) => {
      console.log(err);
    }
  }
  this.sendtext = (userName, userNumber, userMessage, url) => {
    const sendMessage = 'contact: ' + userNumber + ' message: ' + userMessage;

    const data = {
      userName: userName,
      userNumber: '8147530157',
      userMessage: sendMessage,
    }

    $http({
      method: 'POST',
      url: url,
      data: JSON.stringify(data),
      headers: { 'Content-Type': 'application/json' }
    }).then(
        (success) => { successCallback(success) },
        (error) => { errorCallback(error.data) }
      );

    const successCallback = () => {
      console.log('text sent');
    }

    const errorCallback = (err) => {
      console.log(err);
    }
  }
  this.setUserInfo = (userObj) => {
    $rootScope.user_firstname = userObj.data.firstname;
    $rootScope.user_lastname = userObj.data.lastname;
    $rootScope.user_name = userObj.data.username;
    $rootScope._id = userObj.data._id;
  };
});

app.service('animate', function($rootScope, $timeout, $interval, data, task){
  this.homeNav = (pageIndex) => {
    debugger
    $rootScope.currentPage = pageIndex;
    const notGoingToHomePage = (pageIndex != 0);
    if(notGoingToHomePage){
      task.init();
      this.navigationBar();
      this.customButton();
    } else {
      $rootScope.currentCompany = 'sewAndSewColors';
    }
  }
  this.slider = (pageIndex) => {
    $rootScope.pageProducts = "";
    $rootScope.currentPage = pageIndex;
    this.customButton();
    $timeout(() => {
      task.populateImgsOnPage();
      //navigation highlight
      $(".navOptions").removeClass("navHighlight");
      $(".navOptions[data=" + pageIndex + "]").addClass("navHighlight");
    }, 10)
  }
  this.creditCardSlider = (pageIndex) => {
    $timeout(() => {
      $rootScope.currentPage = pageIndex;
    }, 800).then(() => {
      $timeout(() => {
        const allInputs = $('input');
        const cardInfoSelector = $('input[aria-placeholder="Card number"]');
        const dateSelector = $('input[aria-placeholder="MM / YY"]');
        const cvcSelector = $('input[aria-placeholder="CVC"]');
      }, 1000);
    });
  }
  this.navigationBar = () => {
    $timeout(() => {
      $('.navigationBar').on('mouseover', () => {
        $('.navigationBar p').css('marginBottom', '1em');
      })
      $('.navigationBar').on('mouseleave', () => {
        $('.navigationBar p').css('marginBottom', '0.5em');
      })
    })
  }

  this.toSignFormPage = (page) => {
    $rootScope.currentCompany = 'sewAndSewColors';
    $rootScope.themeColor = 'rgb(237, 125, 125)';
    const signup = () => {
      $rootScope.currentSignPage = 'signup';
      $rootScope.signUp = "signOption";
      $rootScope.signIn = "";
    }
    const signin = () => {
      $rootScope.currentSignPage = 'signin';
      $rootScope.signUp = "";
      $rootScope.signIn = "signOption";
    }
    (page === 'signup') ? signup() : signin();
    $('.signUpPage').css('left', '60%');

    $timeout(() => {
      $rootScope.for1sec = true;
    }, 500);
  }
  this.hideSignIngPage = () => {
    $('.signUpPage').css('left', '100%');
    $rootScope.currentSignPage = 'signin';
    $rootScope.for1sec = false;
  }
  //animate the item to the shopping cart
  this.itemToShoppingCart = (selector, nodeValue, index, switchImg) => {
    $('.shoppingCartBigView').hide();
    $('.options').css('left', '100vw');
    $timeout(() => {
      $('.itemPreview').show();
      $('body').append('<div data=\'' + nodeValue + 'clone\' class="itemImage" ng-click=\'moveToCart($event)\'></div>')
      const $selector = $(selector);
      const $clone = $('.itemImage[data=' + nodeValue + 'clone]');

      //find target position
      const cartPostion = $('.cartItemHeading img').position();

      const height = '1.6em';
      const width = '1.2em';

      //if the shopping cart drop needs adjustments chang the dx and dy
      const dx = 94;
      const dy = 130;

      const left = cartPostion.left + dx;
      const top = cartPostion.top + dy;

      const inBag = top + 20;

      const selfPosition = $selector.position();
      const cloneImg = (switchImg) ? switchImg : $rootScope.pageProducts[nodeValue].img;

      $clone.css('position', 'absolute')
            .css('top', selfPosition.top)
            .css('left', selfPosition.left)
            .css('height', '27.4em')
            .addClass('fullBackground')
            .css('backgroundImage', 'url(' + cloneImg + ')');

      const animation = { left: left, top: top, height: height, width: width }
      const animation2 = { top: inBag, opacity: 0 }
      const complete = () => {
        $clone.css('zIndex', -1);
        $clone.animate(animation2)

        const selectedItem = $rootScope.pageProducts[index];
        selectedItem['img'] = (switchImg) ? switchImg : selectedItem['img'];

        //timeout updates the DOM
        $timeout(() => {
          $rootScope.clickable = null;
          if($rootScope.trackItems > data.cartItems.length){
            //check for a cart dupplicate before adding in order to add a time "x" amount instead of I new item in the cart
            if(!$rootScope.pauseChartAddition){
              $rootScope.pauseChartAddition = true;
              $timeout(() => { $rootScope.pauseChartAddition = false }, 3000);
              const item = { name: selectedItem.name, img: selectedItem.img, price: selectedItem.price}
              task.addToShoppingCart(item);
            }
          }
        });
        $timeout(() => {
          $rootScope.clickIt = true;
        }, 2000);
      }
      const options = { duration: 1000, complete }
      $clone.animate(animation, options);
    }, 50);
  }
  this.customButton = () => {
    $('.point').show();
    let count = 0;
    let position = '-4em';
    const pointCustom = $interval(() => {
      if(count === 20){
        $interval.cancel(pointCustom);
        $('.point').fadeOut();
      } else {
        $('.point').css('top', position);
        if(position === '-4em'){ position = '-3em'; }
        else { position = '-4em'; }
        count++;
      }
    }, 500);
    // $timeout(() => {
    //   const animation = { top: '10%', left: '90%', height: '2em' };
    //   const complete = () => {
    //     $('.pageBody').animate({ opacity: 1 });
    //     $('.imgHolder').css('width', '12em');
    //   };
    //   const options = { duration: 1000, complete }
    //   $(".imgHolder").animate(animation, options);
    // }, 1000)
  }
  this.landingPage = () => {
    //set a watch for homepage
    $('.lpBtn').click(() => { $rootScope.onHomePage = false })

    const $movingBox = $('.movingBox');
    const $movingBoxP = $('.movingBoxText');
    $movingBoxP.css('height', '1.4em');
    const animationDuration = 500;
    const intervalDuration = 4500;
    const moveBoxText = ['Sew & So', 'Brandi Logo'];
    let moveBoxTextIndex = 0;

    $rootScope.landingPageAnimationInterval = $interval(() => {

      //check to see if the interval has finished completing before starting another one
      if($rootScope.isIntervalInProgress){ return false }
      $rootScope.isIntervalInProgress = true;

      //stop animation if not on home page
      if(!$rootScope.onHomePage){
        $interval.cancel($rootScope.landingPageAnimationInterval);
        return null
      }

      const initialFirstPageColor = 'rgb(237, 125, 125)';
      const initialSecondPageColor = 'rgb(91, 148, 239)';
      const currentPageColor = $('.landingPageColorOne').css('backgroundColor');
      const animation = { left: '0%' };
      const onFirstCompanyPage = ($rootScope.currentCompany === $rootScope.firstCompany);
      const onSecondCompanyPage = ($rootScope.currentCompany === $rootScope.secondCompany);
      const modelNumber = (onFirstCompanyPage)  ? 2
                        : (onSecondCompanyPage) ? 3
                                                : 1;
      const switchedColor = (onFirstCompanyPage)  ?  $rootScope.colors["sewAndSewColors"].themeColor : $rootScope.colors["brandiCompanyColors"].themeColor;

      //animation start function
      const start = () => {
        moveBoxTextIndex++;
        moveBoxTextIndex = (moveBoxTextIndex === moveBoxText.length) ? 0 : moveBoxTextIndex;
        $movingBox.fadeOut(300);
        $movingBoxP.css('height', '0em');
        $movingBox.removeClass('movingBoxIn').addClass('movingBoxOut');
        $timeout(() => {
          $movingBox.removeClass('movingBoxOut').addClass('movingBoxStart');
          $movingBoxP.text(moveBoxText[moveBoxTextIndex]);
        }, 400).then(() => {
          $timeout(() => {
            $movingBox.fadeIn(750);
            $movingBox.addClass('movingBoxIn');
          }, 100).then(() => {
            $timeout(() => {
              $movingBoxP.css('height', '1.4em');
            }, 200)
          })
        });

        //choose next page to cmoe in
        $rootScope.currentCompany = (onFirstCompanyPage)  ? 'brandiCompanyColors' : 'sewAndSewColors';
      }

      //animation complete function
      const complete = () => {
        if(modelNumber != 3){ $('.homeImg img').fadeIn(500).attr('src', './images/model' + modelNumber + '.png'); }
        $('.landingPageColorOne').css('backgroundColor', $rootScope.colors[$rootScope.currentCompany].themeColor);
        $('.landingPageColorTwo').css('left', '100%').css('backgroundColor', switchedColor);
        $rootScope.isIntervalInProgress = false;
      }

      //animation options function
      const options = { duration: animationDuration, start: start, complete: complete };

      //start the animation
      const startAnimation = () => {
        $('.homeImg img').fadeOut(400);
        $('.landingPageColorTwo').animate(animation, options);
      }

      //start the animation
      startAnimation('firstColor');
    }, intervalDuration)
  }
});

app.service('data', function($rootScope, $interval, $timeout){
  this.setPageProducts = (pageIndex) => {
    let pageProducts = (pageIndex === 1) ? $rootScope.sew_products : $rootScope.crochet_products;
    return pageProducts;
  }

  this.navOptions = ['HOME', 'DESIGNERS', 'CONTACT', 'CHECKOUT'],
  this.cartItems = [],
  this.getCartLength = () => {
    $interval(() => {
      $rootScope.cartQuantity = $rootScope.shoppingCartItems.length;
    })
  }
  this.filters = {
    categories: ['NEW ARRIVALS', 'SHOES', 'PURSES', 'BLANKETS'],
    colors: [
      { name: 'Light Red', hex: '#ed7d7d' },
      { name: 'Light Red', hex: '#ed7d7d' },
      { name: 'Light Red', hex: '#ed7d7d' },
      { name: 'Light Red', hex: '#ed7d7d' },
    ],
    sizes: ['XS', 'S', 'M', 'L']
  }
});

app.service('task', function($rootScope, $interval, $timeout, data){
  this.hasEmptyFieldCheck = (obj) => {
    const values = Object.values(obj);
    const hasEmptyField = values.includes("") || values.includes(undefined);
    return hasEmptyField;
  }
  this.assignIDs = (arr) => {
    const designer = arr[0]["designer"];
    if(designer === 1){
      arr.map((data, index) => { data["id"] = 1000 + index;})
    } else if(designer === 2){
      arr.map((data, index) => { data["id"] = 2000 + index; })
    }
    return arr;
  }
  this.decrement = (item) => {
    let arrayIndex;
    const index = this.findIndexInArrayByIndex(item.index, $rootScope.shoppingCartItems);
    $rootScope.shoppingCartItems[index].quantity--;
    if($rootScope.shoppingCartItems[index].quantity === 0){
      $rootScope.shoppingCartItems.splice(index, 1);
      $rootScope.individualItemsInShoppingCart.map((img, i) => {
        if(img === item.img){
          arrayIndex = i;
        }
      })
      $rootScope.individualItemsInShoppingCart.splice(arrayIndex, 1);
    }
  }
  this.increment = (item) => {
    const index = this.findIndexInArrayByIndex(item.index, $rootScope.shoppingCartItems);
    $rootScope.shoppingCartItems[index].quantity++;
  }
  this.findIndexInArrayByIndex = (index, parentArray) => {
    let foundIndex = 'not found';
    parentArray.map((item, i) => {
      if(item.index == index){
        foundIndex = i;
      }
    })
    return foundIndex;
  }
  this.addToShoppingCart = (item) => {
    const isInShoppingCart = $rootScope.individualItemsInShoppingCart.includes(item.img);
    if(isInShoppingCart){
      $rootScope.shoppingCartItems.map((shoppingCartItem) => {
        if(shoppingCartItem.img === item.img){
          shoppingCartItem.quantity++;
        }
      })
    } else {
      const img = item.img;
      const price = item.price;
      const name = item.name;
      const imgObj = { name: name, img: img, price: price, quantity: 1, index: $rootScope.cartIndex }
      $rootScope.cartIndex++;
      $rootScope.shoppingCartItems.push(imgObj);
      $rootScope.individualItemsInShoppingCart.push(img);
    }
    console.log($rootScope.shoppingCartItems);
    console.log($rootScope.individualItemsInShoppingCart);
  }
  this.removeItemFromShoppingCart = (item) => {
    let arrayIndex;
    const index = this.findIndexInArrayByIndex(item.index, $rootScope.shoppingCartItems);
    $rootScope.shoppingCartItems.splice(index, 1);
    $rootScope.individualItemsInShoppingCart.map((img, i) => {
      if(img === item.img){
        arrayIndex = i;
      }
    })
    $rootScope.individualItemsInShoppingCart.splice(arrayIndex, 1);
  }
  this.checkoutItemsTotal = () => {
    const calculateTotal = () => {
      let total = 0;
      $rootScope.shoppingCartItems.map((item) => {
        const price = item.price.substring(1, item.price.length);
        total += (parseInt(price) * parseInt(item.quantity));
      })
      $rootScope.checkoutItemsTotal = total;
    }
    $interval(() => {
      calculateTotal();
    })
  }
  this.init = () => {
    //hide the gallery view on load
    $('.shoppingCartBigView').hide();
    //fill the page with current company products
    this.populateImgsOnPage();
    //this animates the custom button when hovering over a product
    this.changeCustomizeOpacityAnimation();
    //hide the sign in message field if it is still showing on the sign in page
    $('.signFormMessage').hide();
  }
  this.changeCustomizeOpacityAnimation = () => {
    let opacity = true;
    $interval(() => {
      if(opacity){
        $('.customizeItems').css('opacity', '0.4');
        opacity = !opacity;
      } else {
        $('.customizeItems').css('opacity', '1');
        opacity = !opacity;
      }
    }, 1000);
  }
  this.populateImgsOnPage = () => {
    if(!$rootScope.pageProducts){ return null }
    const imgLength = $rootScope.pageProducts.length;
    const amountToFadeIn = 6;
    let index = 0;
    const imgFill = $interval(() => {
      if((index === imgLength) || (index === amountToFadeIn)){
        $('.itemImg').css('opacity', 1).hide().show().css('left', 0);
        $interval.cancel(imgFill);
      } else if (index < amountToFadeIn) {
        $('.itemImg[data=' + index + ']').css('opacity', 1).hide().fadeIn().css('left', 0);
        index++
      }
    }, 200);
  }
});

app.directive("tocart", function($rootScope) {
  return {
    template: '<div data={{$index}} disableclick class="addToCartBtn flexRow pointer" ng-click="moveToCart($event, $index)"><p data={{$index}} disableclick class="addToChartText" ng-click="moveToCart($event, $index)">ADD TO CART</p></div>'
  }
});

app.directive("view", function($rootScope) {
  return {
    template: '<div data={{$index}} disableclick class="viewBtn flexRow pointer"><p data={{$index}} disableclick class="addToChartText">VIEW GALLERY</p></div>'
  }
});
